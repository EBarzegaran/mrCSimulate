% This Script generates simulation for a network of three interconnected nodes
% including three ROIs: V1d, V3d and TO1
% Author: Elham Barzegaran, 1/2019

clear; clc;
SimFolder = fileparts(pwd);
addpath(genpath(SimFolder));
addpath(genpath(fullfile('..','BrainNetSimulation')));% add BrainNet Toolbox

%% Prepare the results folders
FigPath = 'Figures';
ResultPath = 'ResultData';
if ~exist(fullfile(pwd,FigPath),'dir'),mkdir(FigPath);end
if ~exist(fullfile(pwd,ResultPath),'dir'),mkdir(ResultPath);end

%% Important Parameters
simulateEEG = 1; % if simulateEEG = 0, then it loads in the data otherwise do the simulation using Simulate functions
Lambda = [.1 .2 .3 .4 .5 .6 .7 .8 .9 1];%SNR level
controlcond = 0; % to use control condition or not

%% Prepare Project path and ROIs
DestPath = fullfile(SimFolder,'Examples','ExampleData_Inverse');
AnatomyPath = fullfile(DestPath,'anatomy');
ProjectPath = fullfile(DestPath,'FwdProject');

[RoiList,subIDs] = mrC.Simulate.GetRoiClass(ProjectPath,AnatomyPath);% 13 subjects with Wang atlab 
V1_RoiList = cellfun(@(x) {x.searchROIs('V1d','wang','L')},RoiList);
V3_RoiList = cellfun(@(x) {x.searchROIs('V3d','wang','L')},RoiList);
TO1_RoiList = cellfun(@(x) {x.searchROIs('TO1','wang','L')},RoiList);
Net_RoiList = cellfun(@(x,y,z) {mergROIs(mergROIs(x,y),z)},V1_RoiList,V3_RoiList,TO1_RoiList);

All_RoiList = Net_RoiList;

%% Load in wang ROIs and inverses
load(fullfile(ResultPath,'ROI_colors_Paper.mat'));

Wang_RoiList = cellfun(@(x) {x.getAtlasROIs('wang')},RoiList);
Wang_Chunks = cellfun(@(x) x.ROI2mat(20484),Wang_RoiList,'uni',false);

Inverse = mrC.Simulate.ReadInverses(ProjectPath,'mneInv_bem_gcv_regu_TWindow_0_1334_wangROIsCorr.inv');

%% Prepare background activity

% load simulation signal
% NOTE: this signal is generated by running ARSIgnalGenerate.m and BrainNetSimulation Toolbox
load(fullfile('private','NetTimeSeries_3Nodes'));
SF = Net_connect.SF;
eplength = 2*SF; % two seconds
epNum = 15;
TS_all = TS_connect(1:3,1:epNum*eplength);

%% Simulating network
ModeNames= {'connect','unconnect'};
% define noise properties
Noise.mu.pink=2;
Noise.mu.alpha=2;
Noise.mu.sensor=2;

if simulateEEG
    for L = 1:numel(Lambda) % different noise levels
        Noise.lambda = Lambda(L);
        for Mode = 1:1 % Mode 1 is connected network: Test, Mode 2 is unconnected network: COntrol
            if ~exist(fullfile(ResultPath,['ConnectExampleData_' ModeNames{Mode} '_Lambda' num2str(Lambda(L)) '.mat']),'file')
                clear OrigROIData ReconsROIData EEG;
                eval(['TS = TS_' ModeNames{Mode} ';']);
                for ep = 1:epNum
                    disp(['Generating EEG: Epoch #' num2str(ep)]);
                    [EEGData_noise,~,EEGData_signal,~,~,masterList,subIDs] = mrC.Simulate.SimulateProject(ProjectPath,'anatomyPath',AnatomyPath,...
                        'signalArray',TS_all(:,(ep-1)*eplength+1:ep*eplength)','signalsf',SF,'NoiseParams',Noise,'rois',All_RoiList,...
                        'Save',true,'cndNum',1,'doSource' ,true,'signalSNRFreqBand',repmat([5 15],[size(TS_all,1) 1]),'doFwdProjectNoise',false);
                    OrigROIData{ep} = cellfun(@(x,y) x*y./repmat(sum(y), [size(x,1) 1]), SourceData, Wang_Chunks,'uni',false);% sum? or average?
                    ReconsROIData{ep} = cellfun(@(x,y,z) x*y*z./repmat(sum(z), [size(x,1) 1]), EEGData1,Inverse , Wang_Chunks,'uni',false);% sum? or average?
                    EEG{ep} = EEGData1;
                end
                OrigROIData = cat(1,OrigROIData{:});
                ReconsROIData = cat(1,ReconsROIData{:});
                EEG = cat(1,EEG{:});
                save(fullfile(ResultPath,['ConnectExampleData_' ModeNames{Mode} '_Lambda' num2str(Lambda(L))]),'OrigROIData','ReconsROIData','EEG','subIDs','masterList')
            else
                load(fullfile(ResultPath,['ConnectExampleData_' ModeNames{Mode} '_Lambda' num2str(Lambda(L)) '.mat']));
            end
%            MF = 40; % maximum frequency to keep
        end
    end
end
%% cross spectrum density calculations

ModeNames= {'connect','unconnect'};
ConMeasures = {'OCOH','RCOH','OWPLI','RWPLI'};

% Frequencies
LF = 9;HF = 22;
Freqs = [LF HF];
ref = zeros(50,50,2); ref(25,41,1)=1;ref(29,41,1)=1;ref(25,29,1)=1;%real connection
ref(25,29,2)=1;%real connection
% ROIS
Labels = [Wang_RoiList{1}.getFullNames('noatlashemi')];
Labels{25} = '\color[rgb]{0,1,0}\rightarrow TO1';
Labels{29} = '\color[rgb]{0,0,1}\rightarrow V1d';
Labels{41} = '\color[rgb]{1,0,0}\rightarrow V3d';
INDs = [1:2:25 29:2:50];

for L = 1:numel(Lambda)
    % load and organize data
    load(fullfile(ResultPath,['ConnectExampleData_' ModeNames{1} '_Lambda' num2str(Lambda(L))  '.mat']));
    for sub = 1:numel(subIDs)
        disp(['Subject #' subIDs{sub}]);
        % Original simulated signal
        Data = OrigROIData(:,sub);
        Data = cat(3,Data{:});
        [OrigCSD{sub,L},OrigCOH{sub,L},F] = mrC.Connectivity.EEGcpsd(Data,'SF',SF,'Type','fft','winLen',300,'Nov',150);
        % Reconstructed signal
        Data = ReconsROIData(:,sub);
        Data = cat(3,Data{:});
        [ReconsCSD{sub,L},ReconsCOH{sub,L}] = mrC.Connectivity.EEGcpsd(Data,'SF',SF,'Type','fft','winLen',300,'Nov',150);
    end
    %% subsampling
    R_coh = ReconsCOH(:,L,1);
    NTS = numel(R_coh);% number of total samples
    BS = nchoosek(1:NTS,5);
    Nboots = 100;%size(BS,1)/2;
    BS = BS(randperm(size(BS,1),Nboots),:);
    
    %% Prepare ICOH and WPLI for plotting
    for boots = 1:Nboots
        display(['Bootstrapping #' num2str(boots)]);
        R_coh = ReconsCOH(:,L);
        R_coh = R_coh(BS(boots,:));
        R_coh = cat(4,R_coh{:}); % Recons
        RCOH(:,:,:,L) = squeeze(mean(imag(R_coh),4));

        O_coh = OrigCOH(:,L);
        O_coh = O_coh(BS(boots,:));
        O_coh = cat(4,O_coh{:}); % Orig
        OCOH(:,:,:,L) = squeeze(mean(imag(O_coh),4)); 

        % wPLI
        % Prepare spectrum inputs
        RCSD = ReconsCSD(:,L);
        RCSD = RCSD(BS(boots,:));
        RCSD = cat(4,RCSD{:}); %  Recons
        RCSD = permute(RCSD,[4 2 3 1]);

        OCSD = OrigCSD(:,L);
        OCSD = OCSD(BS(boots,:));
        OCSD = cat(4,OCSD{:}); % Orig
        OCSD = permute(OCSD,[4 2 3 1]);

        % fieldtrip is needed
        O_wpli = ft_connectivity_wpli(OCSD,'dojack',true);
        OWPLI(:,:,:,L) = permute(O_wpli,[3 1 2]);
        R_wpli = ft_connectivity_wpli(RCSD,'dojack',true);
        RWPLI(:,:,:,L) = permute(R_wpli,[3 1 2]);
        %% calculate TP and FPs
        th = 0:.0001:1; % Thresholds for PR and ROC curves
        %th = 1-th.^3;

        for t = 1:numel(th)
            for conM = 1:numel(ConMeasures)
                for F = 1:numel(Freqs)
                    eval(['D = squeeze(abs(' ConMeasures{conM} '(Freqs(F),:,:,L)));']);
                    %D = (D-min(D(:)))/(max(D(:))-min(D(:)));
                    D(1:length(D)+1:end)=0;
                    Dif = triu((D>th(t)).*(ref(:,:,F)==0));
                    tp = triu((D>th(t)).*ref(:,:,F));
                    TP(t,boots,conM,F,L) = sum(tp(:));
                    FP(t,boots,conM,F,L) = sum(Dif(:));
                end
            end
        end
    end
end

save(fullfile(ResultPath,'Connectivity_Bootstrap_TPFP2.mat'),'TP','FP');

%%
load(fullfile(ResultPath,'Connectivity_Bootstrap_TPFP.mat'));
FontS = 20;
TPM = squeeze(mean(TP,2));
FPM = squeeze(mean(FP,2));

FIG = figure;
Cs = colormap(cool(10));%[ones(10,1)*.3 ones(10,1)*.3 (0.1:0.1:1)'];
N = 2:2:10;
CondNames = {'Original','Reconstructed','Original','Reconstructed'};
S1 = subplot(3,2,3);
FOI = 1;
%
for l =1:10
    for cond = 1:4
        perc = squeeze(TPM(:,cond,FOI,l))./(squeeze(TPM(:,cond,FOI,l))+squeeze(FPM(:,cond,FOI,l)));
        perc(isnan(perc))=0;
        rec = squeeze(TPM(:,cond,FOI,l))/3;
        AUC(cond,l) = trapz(rec,perc);

    end
end

S = subplot(2,1,2);
B = bar(abs(AUC([2 4],:))','grouped');
set(B(1),'FaceColor',[0.3,.3,.3])
set(B(2),'FaceColor',[.7,.7,.7])
xlim([0 11])
ylim([0 .25])
legend('ICoh','WPLI')
set(gca,'xticklabel',arrayfun(@(x) [num2str(Lambda(x))],1:10,'uni',false))
ylabel('AUCPR','fontsize',FontS-4)
xlabel('SNR','fontsize',FontS-4);
set(gca,'fontsize',FontS-4)
set(S,'position',get(S,'position')+[-.0 -.045 .0 -.035]);


% load the results from ConnectivityExample_Poster
load(fullfile(ResultPath,'Connectivity_noBootstrap.mat'));
% Plotting connectivity matrices
CondNames = {'Original','Reconstructed','Original','Reconstructed'};
ConMeasures = {'OCOH','RCOH','OWPLI','RWPLI'};

SNRs = [1 10];
for i = 1:numel(SNRs)
    for j = 1:numel(ConMeasures)
        eval(['P =  abs(squeeze(' ConMeasures{j} '(Freqs(FOI),INDs,INDs,SNRs(i))));']);
        S(i,j) = subplot(3,4,j+(i-1)*4);
        imagesc(P)
        set(gca,'xtick',1:numel(INDs),'xticklabels',[],'ytick',1:numel(INDs),'yticklabels',[]);
        caxis([min(P(:)) max(P(:))]);
        colormap(jmaColors('hotcortex'));
        if (i == numel(SNRs)) && (j==1)
            ylabel('ROIs','fontsize',FontS-8);
            xlabel('ROIs','fontsize',FontS-8);
        end
        if i==1
            title(CondNames{j},'fontsize',FontS-4);
            switch j
                case 2
                    set(S(i,j),'position',get(S(i,j),'position')+[ -.015 -.03 .02 .02]);
                case 1
                    set(S(i,j),'position',get(S(i,j),'position')+[ 0 -.03 .02 .02])
                case 3
                    set(S(i,j),'position',get(S(i,j),'position')+[ -.0 -.03 .02 .02]);
                case 4
                    set(S(i,j),'position',get(S(i,j),'position')+[ -.015 -.03 .02 .02]);
            end
        else
            switch j
                case 2
                    set(S(i,j),'position',get(S(i,j),'position')+[ -.015 .02 .02 .02]);
                case 1
                    set(S(i,j),'position',get(S(i,j),'position')+[ 0 .02 .02 .02])
                case 3
                    set(S(i,j),'position',get(S(i,j),'position')+[ -.0 .02 .02 .02]);
                case 4
                    set(S(i,j),'position',get(S(i,j),'position')+[ -.015 .02 .02 .02]);
            end
        end
    end
end

axes('NextPlot','add','position',[.28 .93 .2 .1]);
text(.0,.5,'ICoh','fontsize',FontS); axis off

axes('NextPlot','add','position',[.71 .93 .2 .1]);
text(.0,.5,'WPLI','fontsize',FontS); axis off

axes('NextPlot','add','position',[.08 .68 .2 .1]);
h=text(.0,.5,'SNR = 0.1','fontsize',FontS-4); axis off
set(h,'Rotation',90);

axes('NextPlot','add','position',[.08 .45 .2 .1]);
h=text(.0,.5,'SNR = 1','fontsize',FontS-4); axis off
set(h,'Rotation',90);


set(FIG,'paperposition',[1 1 11 8.5]);
%print(fullfile('Figures','ConnectivityExample_AUCPR2_high.tif'),'-r300','-dtiff');
